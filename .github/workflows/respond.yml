name: Respond

on:
  workflow_dispatch:

jobs:
  respond:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read response and set as output
        id: read_file
        run: |
          content=$(< ./Response.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print loaded response
        uses: actions/github-script@v7
        with:
          script: |
            const content = `${{ steps.read_file.outputs.content }}`;
            console.log(content);

      - name: Load issues and comment if necessary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const content = `${{ steps.read_file.outputs.content }}`;

            const owner = 'mafaca';
            const repo = 'UtinyRipper';

            console.log("Loading issues...");
            try {
              // Get the most recent issues
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                per_page: 10,
                state: 'open',
                sort: 'created',
                direction: 'desc',
              });

              for (const issue of issues.data) {
                console.log(`Checking issue #${issue.number}`);
                const comments = await github.rest.issues.listComments({
                  owner,
                  repo,
                  issue_number: issue.number,
                });

                const userHasCommented = comments.data.some(c => c.user.login === 'ds5678');

                if (!userHasCommented) {
                  console.log(`User hasn't commented on issue #${issue.number}, posting comment...`);
                  //await github.rest.issues.createComment({
                  //  owner,
                  //  repo,
                  //  issue_number: issue.number,
                  //  body: 'Automated message because you haven't commented yet!',
                  //});
                } else {
                  console.log(`User has already commented on issue #${issue.number}`);
                }

                // Sleep 2 seconds between iterations
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            } catch (error) {
              core.setFailed(error.message);
            }
